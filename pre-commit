#!/usr/bin/env node

const execSync = require('child_process').execSync

exec = cmd => execSync(cmd).toString()

const red = str => `\u001B[1;31m${str}\u001B[0m`
const blue = str => `\u001B[1;34m${str}\u001B[0m`
const grey = str => `\u001B[2;37m${str}\u001B[0m`
const magenta = str => `\u001B[1;35m${str}\u001B[0m`
const redFlash = str => `\u001B[1;31;5m${str}\u001B[0m`

const addSpace = length => new Array(length).fill(1).map(item => ` `).join('')
const space = addSpace(14)

const signStr = `<<<<<<`

const errInfo = []

try {
    const files = exec(`git status -s | awk '{print $2}'`).split('\n').filter(file => file.length)

    files.forEach(file => {
        const lines = exec(`cat ${file}`).split('\n')

        lines.forEach((line, lineNo) => {
            const column = line.indexOf(signStr)
            if (~column) {
                errInfo.push({
                    file,
                    line: [`\n${red(`${space}${line}`)}`].concat(exec(`cat ${file} | sed -n '${lineNo + 2},${lineNo + 7}'p`).split('\n').map(line => `${grey(`${space}${line}`)}`)).join('\n'),
                    lineNo: lineNo + 1,
                    column
                })
            }
        })
    })
} catch (err) {
    console.log(err)
}

if (errInfo.length) {
    errInfo.forEach(({
        file,
        line,
        lineNo,
        column
    }) => {
        console.log(redFlash(`\nError: `))
        console.log(`        ${blue('file')}: ${magenta(file)}`)
        console.log(`        ${blue('line')}: ${magenta(lineNo)}`)
        console.log(`      ${blue('column')}: ${magenta(column)}`)
        console.log(`    ${blue('conflict')}: ${line}`)
    })

    process.exit(1)
}

process.exit(0)
